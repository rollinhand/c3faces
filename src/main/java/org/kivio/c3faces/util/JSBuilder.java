/**
 Copyright 2015 Martin Linha

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 **/
package org.kivio.c3faces.util;

import org.kivio.c3faces.script.Property;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Class wraps StringBuilder and contains methods to append .js specific strings.
 *
 * @author Martin Linha
 */
public class JSBuilder {

    private StringBuilder builder = new StringBuilder();

    public JSBuilder() {
    }

    /**
     * Creates new instance of this class
     *
     * @return New JSBuiler instance
     */
    public static JSBuilder build() {
        return new JSBuilder();
    }

    /**
     * Appends "c3" string to wrapped StringBuilder
     *
     * @return Reference to same class instance
     */
    public JSBuilder c3() {
        builder.append("c3");
        return this;
    }

    /**
     * Appends .js var with specified name to wrapped StringBuilder
     *
     * @param var Name of var
     * @return Reference to same class instance
     */
    public JSBuilder var(String var) {
        builder.append("var ").append(var).append(" = ");
        return this;
    }

    /**
     * Appends ";" string and break line to wrapped StringBuilder and
     *
     * @return Reference to same class instance
     */
    public JSBuilder endLine() {
        builder.append("; \n");
        return this;
    }

    /**
     * Returns result of wrapped StringBuilder
     *
     * @return Result of wrapped StringBuilder
     */
    public String getResult() {
        String res = builder.toString();
        builder = new StringBuilder();
        return res;
    }

    public JSBuilder setElement(String jsVariable) {
        builder.append("setElement('");
        builder.append(jsVariable);
        builder.append("')");
        return this;
    }

    public JSBuilder append(String divId, String jsVariable) {
        builder.append("append('");
        builder.append(divId);
        builder.append("', '");
        builder.append(jsVariable);
        builder.append("')");
        return this;
    }

    /**
     * Appends "data" in which inserts all scripts generated by specified collection of properties to wrapped StringBuilder
     *
     * @param properties Properties which generated script should be appended
     * @return Reference to same class instance
     */
    public JSBuilder generate(Collection<Property> properties) {
        builder.append(".generate({");
        List<Property> attributes = new ArrayList<>(properties);
        for (int i = 0; i < attributes.size(); i++) {
            Property attr = attributes.get(i);
            String script = attr.getScript();
            if (i > 0 && !script.isEmpty()) {
                builder.append(", ");
            }
            builder.append(script);
        }

        builder.append("})");
        return this;
    }
}
